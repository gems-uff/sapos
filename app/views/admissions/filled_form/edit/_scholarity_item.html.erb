<%
  sid = "scholarity-item-#{Random.rand(10000)}"
  first_year = 100.years.ago.year
  last_year = 10.years.from_now.year

  dates = []
  fields = [
    {name: :level, type: :select, values: values},
    {name: :status, type: :select, values: statuses},
    {name: :institution, type: :text},
    {name: :course, type: :text},
    {name: :location, type: :location},
    {name: :grade, type: :text},
    {name: :grade_interval, type: :text},
    {name: :start_date, type: :date},
    {name: :end_date, type: :date},
  ].map do |field|
    field[:hide] = configuration["scholarity_#{field[:name]}_hide"]
    field[:required] = configuration["scholarity_#{field[:name]}_required"]
    field[:label] = configuration["scholarity_#{field[:name]}_name"]
    field[:description] = configuration["scholarity_#{field[:name]}_description"]
    field[:options] = {
      class: ["scholarity-#{field[:name]}", "text-input", filled_class],
      required: field[:required],
    }
    if field[:type] == :date
      dates << field
    else
      if field[:type] == :select
        field[:html_options] = field[:options]
      end
      field[:options] = field[:options].merge(size: 30)
    end
    field
  end
%>

<ol class="nested-fields scholarity" id="<%= sid %>">
  <% fields.each do |field| %>
    <% unless field[:hide] %>
      <li class="form-element <%= "required" if field[:required] %>">
        <dl>
          <dt>
            <%= f.label field[:name], field[:label], for: field[:options][:id] %>
            <% if field[:description].present? %>
              <span class="filled-form-description">
                <%= field[:description] %>
              </span>
            <% end %>
          </dt>
          <dd>
            <% if field[:type] == :select %>
              <%= f.select field[:name], field[:values], field[:options], field[:html_options] %>
            <% elsif field[:type] == :text %>
              <%= f.text_field field[:name], field[:options] %>
            <% elsif field[:type] == :date %>
              <%= f.text_field field[:name], field[:options] %>
            <% elsif field[:type] == :location %>
              <div class="scholarity-location">
                <%
                  city_options = {size: 15, class: ["text-input", "city-field", filled_class]}
                  city_options[:required] = "required" if field[:required]
                  city_options[:id] = "#{sid}-city"
                  state_options = {size: 15, class: ["text-input", "city-field", filled_class]}
                  state_options[:id] = field[:options][:id]
                  values = (f.object[field[:name]] || "").split(", ")
                  (2 - values.length).times { values << "" }
                %>
                <%= f.hidden_field field[:name], class: ["hidden", filled_class] %>
                <%= text_field_tag :state, values[1], placeholder: I18n.t(
                  "activerecord.attributes.admissions/form_field.field_types.city_fields.state"
                ), **state_options %>
                <%= text_field_tag :city, values[0], placeholder: I18n.t(
                  "activerecord.attributes.admissions/form_field.field_types.city_fields.city"
                ), **city_options %>
              </div>
            <% end %>
          </dd>
      </li>
    <% end %>
  <% end %>
  <li class="form-element remove-scholarity">
    <%= link_to_remove_association (t "admissions.apply.edit.scholarity.remove"), f %>
  </li>
  <li class="form-element">
    <br/>
  </li>
</ol>

<script>

function scholarity_item_activate_js(sid) {
  $(`#${sid} .remove-scholarity input[type=hidden]`).addClass("<%= filled_class %>");
  $(`#${sid} .scholarity-location .city-field`).on("change", function() {
    let value = $(`#${sid} .scholarity-location .city-field`)
      .map((i, el) => $(el).val()).toArray().reverse()
      .join(", ")
    $(`#${sid} .scholarity-location .hidden`).val(value)
  })

  $(`#${sid} .scholarity-location input[name="city"]`).autocomplete({
    source: autocomplete_search("<%= city_form_autocompletes_path %>", (request) => {
      request.state = $(`#${sid} .scholarity-location input[name="state"]`).val();
    })
  })

  $(`#${sid} .scholarity-location input[name="state"]`).autocomplete({
    source: autocomplete_search("<%= state_form_autocompletes_path %>", (request) => {})
  })


  $(`#${sid} input.scholarity-institution`).autocomplete({
    source: autocomplete_search("<%= institution_form_autocompletes_path %>", (request) => {})
  })

  $(`#${sid} input.scholarity-course`).autocomplete({
    source: autocomplete_search("<%= course_form_autocompletes_path %>", (request) => {
      request.institution = $(`#${sid} input.scholarity-institution`).val();
    }),
  })

  $(`#${sid} input.scholarity-grade_interval`).autocomplete({
    source: ["[0, 10]", "[0, 100]", "[0, 5]", "[0, 4]", "[F, A]", "A, B, C, D, F"],
  })

  function validateScholarityDateField(field, value) {
    if (!value) {
      return "";
    }
    const regex = /^(\d{1,2})\/(\d{1,2})\/(\d{2,4})$/;
    groups = value.match(regex)
    if (!groups || isNaN(Date.parse(`${groups[3]}-${groups[2]}-${groups[1]}`))) {
      return `${field} <%= I18n.t(
        "activerecord.errors.models.admissions/filled_form_field.invalid_date",
      ) %>`
    }
    return "" ;
  }


  <% dates.each do |field| %>
    $(`#${sid} input.scholarity-<%= field[:name] %>`).datepicker({
      yearRange: '<%= first_year %>:<%= last_year %>'
    })

    window.customFormValidations["<%= filled_class %>"].push(function() {
      let input = $(`#${sid} input.scholarity-<%= field[:name] %>`).get(0)
      if (input.disabled) {
        return true;
      }
      let label = $("label[for='" + $(input).attr('id') + "']");
      error_msg = validateScholarityDateField(label.text(), $(input).val());
      input.setCustomValidity(error_msg);
      if (error_msg != "") {
        input.reportValidity()
        return false;
      }
      return true;
    })

  <% end %>
}

$(document).ready(function() {
  <% if run_js %>
    scholarity_item_activate_js("<%= sid %>");
  <% end %>
})

</script>
